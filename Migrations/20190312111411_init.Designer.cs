// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tips.Database;

namespace Tips.Migrations
{
    [DbContext(typeof(TipsContext))]
    [Migration("20190312111411_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("Tips.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Tips.Models.Tip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("ImagePath");

                    b.Property<string>("Location");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("UserId");

                    b.Property<string>("VideoPath");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tips");
                });

            modelBuilder.Entity("Tips.Models.TipCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<int>("TipId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TipId");

                    b.ToTable("TipCategories");
                });

            modelBuilder.Entity("Tips.Models.TipRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("RateValue");

                    b.Property<int>("TipId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TipId");

                    b.HasIndex("UserId");

                    b.ToTable("TipRatings");
                });

            modelBuilder.Entity("Tips.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("SysUserId");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Tips.Models.UserRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("RatedUserId");

                    b.Property<int>("Reputation");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RatedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRatings");
                });

            modelBuilder.Entity("Tips.Models.Tip", b =>
                {
                    b.HasOne("Tips.Models.User", "User")
                        .WithMany("Tips")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tips.Models.TipCategory", b =>
                {
                    b.HasOne("Tips.Models.Category", "Category")
                        .WithMany("TipCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tips.Models.Tip", "Tip")
                        .WithMany("TipCategories")
                        .HasForeignKey("TipId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tips.Models.TipRating", b =>
                {
                    b.HasOne("Tips.Models.Tip", "Tip")
                        .WithMany("TipRatings")
                        .HasForeignKey("TipId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tips.Models.User", "User")
                        .WithMany("TipRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tips.Models.UserRating", b =>
                {
                    b.HasOne("Tips.Models.User", "RatedUser")
                        .WithMany("RatedUserRatings")
                        .HasForeignKey("RatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tips.Models.User", "User")
                        .WithMany("UserRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
